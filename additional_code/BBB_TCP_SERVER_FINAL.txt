/*
    C socket server example

    http://www.binarytides.com/server-client-example-c-sockets-linux/
*/

#include<stdio.h>
#include<string.h>    //strlen
#include<sys/socket.h>
#include<arpa/inet.h> //inet_addr
#include<unistd.h>    //write

int main(int argc , char *argv[])
{
    int socket_desc , client_sock , c , read_size;
    struct sockaddr_in server , client;
    char client_message[256];

    //Create socket
    socket_desc = socket(AF_INET , SOCK_STREAM , 0);
    if (socket_desc == -1)
    {
        printf("Could not create socket\n");
    }
    printf("Socket created\n");

    //Prepare the sockaddr_in structure
    server.sin_family = AF_INET;
    server.sin_addr.s_addr = INADDR_ANY;
    server.sin_port = htons( 2503 );

    //Bind
    if( bind(socket_desc,(struct sockaddr *)&server , sizeof(server)) < 0)
    {
        //print the error message
    	printf("bind failed. Error\n");
        return 1;
    }
    printf("bind done\n");

    //Listen
    listen(socket_desc , 3);

    //Accept and incoming connection
    printf("Waiting for incoming connections...\n");
    c = sizeof(struct sockaddr_in);

    //accept connection from an incoming client
    client_sock = accept(socket_desc, (struct sockaddr *)&client, (socklen_t*)&c);
    if (client_sock < 0)
    {
    	printf("accept failed\n");
        return 1;
    }
    printf("Connection accepted\n");

    //Receive a message from client
    while( (read_size = recv(client_sock , client_message , 20 , 0)) > 0 )
    {
        //Send the message back to client
        //write(client_sock , client_message , strlen(client_message));
    	printf("%d\n", read_size);
    }

    if(read_size == 0)
    {
    	printf("Client disconnected\n");
        fflush(stdout);
    }
    else if(read_size == -1)
    {
    	printf("recv failed\n");
    }

    return 0;

    /* If connection is established then start communicating */
       /*bzero(client_message,256);
       int n = read( client_sock,client_message,2 ); //2 byte bekle

       if (n < 0) {
    	   printf("ERROR reading from socket\n");
          exit(1);
       }

       printf("Here is the message: %s  %x\n",client_message, client_message[1]);

       n = write(client_sock,"I got your message",18);

       if (n < 0) {
    	   printf("ERROR writing to socket\n");
          exit(1);
       }

       return 0;*/
}

